treatment
mkt
class(mkt)
str(sim_data)
sim_data <- setNames(data.frame(lapply(c(treatment, vars), function(var) eval(parse(text = var)))), c(treatment, vars))
str(sim_data)
dim(results)
mean(eval(parse(text = exposure)))
ans <- data.frame(treatment = treatment_vals, ate = NA)
ans
treatment_vals <- unname(quantile(sample_treatment, seq(0.05, 0.95, by = 0.3)))
treatment_vals
ans <- data.frame(treatment_value = treatment_vals, ate = NA)
for(i in 1:length(treatment_vals)){
assign(treatment, rep(treatment_vals[i], N))
for(m in 1:M){
for(var in vars){
if(!exists(var)){
assign(var, do.call(f, append(list(vars = parents[[var]], env = env, result_var = var), f.args[[var]])), envir = pos.to.env(-1L))
}
}
results[m, i] <- mean(eval(parse(text = exposure)))
rm(list = vars)
}
}
ans$ate <- apply(results, 2, mean)
ans
source("../miscellaneous files/get_ate.R")
f.args <- gen_model_param(dag = g, f.args = list(mkt = list(betas = list(comp = 0)), visits = list(betas = list(mkt = 1)),
sales = list(betas = list(visits = 0.5))))
f.args
f.args[["sales"]]
f.args[["visits"]]
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", exposure = "sales")
a
diff(c(1, 2, 3))
diff(c(1, 2, 3, 5))
knitr::opts_chunk$set(echo = F, warning = F, message = F, cache = F)
set.seed(1)
options(scipen = 999)
packages <- c(
"tidyverse", # best thing that ever happend to me
"pander", # table rendering
"dagitty", # Create DAGs
"ggdag" # ggplot DAGs
)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(char = packages)
if (!require("bartCause")) pacman::p_load_gh("vdorie/bartCause")
g <- dagitty("dag {
sales [pos=\"0,0\"]
mkt [pos=\"2,0\"]
comp [pos=\"1,1\"]
visits [pos=\"1,0\"]
visits -> sales
mkt -> visits
comp -> mkt
comp -> sales
}")
ggdag(tidy_dagitty(g)) + theme_dag_blank()
source("../miscellaneous files/sim_mixed_dag.R")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2)),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "cosin", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "quadratic", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(sales, comp)) + geom_boxplot() + stat_smooth()
source("../miscellaneous files/gen_model_param.R")
f.args_1 <- gen_model_param(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_1)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_1)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
source("../miscellaneous files/get_ate.R")
f.args <- gen_model_param(dag = g, f.args = list(mkt = list(betas = list(comp = 0)), visits = list(betas = list(mkt = 1)),
sales = list(betas = list(visits = 0.5))))
dag = g; f.args = f.args; treatment = "mkt"; exposure = "sales"
treatment_vals = NULL
N = 1000, M = 1000
N = 1000; M = 1000
if(!identical(f.args, gen_model_param(dag = dag, f.args = f.args))) stop("f.args supplied does not specify all model parametrs. Consider using gen_model_param(f.args)")
if(f.args[[exposure]]$levels > 2) stop("Exposure must be either numeric (levels = 1) or binary (levels = 2)")
if(is.null(treatment_vals)){
if(f.args[[treatment]]$levels == 1){
sample_treatment <- sim_mixed_dag(dag = dag, f.args = f.args, N = N)[[treatment]]
treatment_vals <- unname(quantile(sample_treatment, seq(0.05, 0.95, by = 0.3)))
} else {
treatment_vals <- f.args[[treatment]]$labels
}
}
treatment_vals
results <- matrix(ncol = length(treatment_vals), nrow = M)
ans <- data.frame(treatment_value = treatment_vals, ate = NA)
vars <- names(dag); vars <- vars[vars != treatment]
parents <- setNames(lapply(vars, function(var) dagitty::parents(dag, var)), vars)
f <- function(vars, link = "identity", levels = 1L, betas = NULL, labels = NULL, sinr = 1, env = NULL, result_var = NULL){
if(!link %in% c("identity", "quadratic", "cosin")) stop(paste0("link argument in f.args for variable \"", result_var, "\" has to be one of identity, quadratic, cosin"))
lp <- rep(0, N)
for(var in vars){
var_val <- try(eval(parse(text = var), envir = parent.frame(1L)), silent = T)
if(class(var_val) == "try-error"){
assign(var, do.call(f, append(list(vars = parents[[var]], result_var = var), f.args[[var]])), envir = pos.to.env(-1L))
assign(var, eval(parse(text = var)), envir = env)
var_val <- eval(parse(text = var))
}
beta <- as.matrix(betas[[var]])
X <- model.matrix(~ var_val - 1)
if(is.factor(var_val)) X <- X[, -1]
if(ncol(X) != nrow(beta)) stop(paste0("Number of levels in \"", var, "\" does not match number of input betas for that variable"))
lp <- lp + as.numeric(X %*% beta)
}
if(link == "quadratic") lp <- sign(lp)*lp^2
if(link == "cosin") lp <- cos(lp*2)
if(var(lp) == 0){
lp <- lp + rnorm(length(lp), sd = 1) # add noise
} else {
lp <- lp + rnorm(length(lp), sd = sqrt(var(lp)/sinr)) # add noise
}
if(levels > 1){
if(is.null(labels)) labels <- LETTERS[1:levels]
if(length(labels) != levels) stop(paste0("labels do not match levels argument for variable \"", result_var, "\""))
thresh <- quantile(x = lp, prob = seq(0, 1, length.out = levels + 1))
lp <- cut(lp, breaks = thresh, labels = labels, include.lowest = T)
}
return(lp)
}
env <- environment()
for(i in 1:length(treatment_vals)){
assign(treatment, rep(treatment_vals[i], N))
for(m in 1:M){
for(var in vars){
if(!exists(var)){
assign(var, do.call(f, append(list(vars = parents[[var]], env = env, result_var = var), f.args[[var]])), envir = pos.to.env(-1L))
}
}
results[m, i] <- mean(eval(parse(text = exposure)))
rm(list = vars)
}
}
apply(results, 2, mean)
ans$ate <- c(NA, diff(apply(results, 2, mean)))
ans
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", exposure = "sales")
a
if(!identical(f.args, gen_model_param(dag = dag, f.args = f.args))) stop("f.args supplied does not specify all model parametrs. Consider using gen_model_param(f.args)")
if(f.args[[exposure]]$levels > 2) stop("Exposure must be either numeric (levels = 1) or binary (levels = 2)")
if(is.null(treatment_vals)){
if(f.args[[treatment]]$levels == 1){
sample_treatment <- sim_mixed_dag(dag = dag, f.args = f.args, N = N)[[treatment]]
treatment_vals <- unname(quantile(sample_treatment, seq(0.05, 0.95, by = 0.3)))
} else {
treatment_vals <- f.args[[treatment]]$labels
}
}
treatment_vals
results <- matrix(ncol = length(treatment_vals), nrow = M)
ans <- data.frame(treatment_value = treatment_vals, ate = NA)
ans
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", treatment_vals = seq(-2, 2), exposure = "sales")
a
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", exposure = "sales")
a
debugSource('~/Documents/my folder/Iyar projects/blog/miscellaneous files/get_ate.R')
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", exposure = "sales")
a = sim_mixed_dag(dag = dag, f.args = f.args)
str(a)
dag
f.args$mkt
debugSource('~/Documents/my folder/Iyar projects/blog/miscellaneous files/sim_mixed_dag.R')
a = sim_mixed_dag(dag = dag, f.args = f.args)
debugSource('~/Documents/my folder/Iyar projects/blog/miscellaneous files/sim_mixed_dag.R')
a = sim_mixed_dag(dag = dag, f.args = f.args)
a = sim_mixed_dag(dag = dag, f.args = f.args)
a = sim_mixed_dag(dag = dag, f.args = f.args)
a = sim_mixed_dag(dag = dag, f.args = f.args)
mkt
a = sim_mixed_dag(dag = dag, f.args = f.args)
mkt
knitr::opts_chunk$set(echo = F, warning = F, message = F, cache = F)
set.seed(1)
options(scipen = 999)
packages <- c(
"tidyverse", # best thing that ever happend to me
"pander", # table rendering
"dagitty", # Create DAGs
"ggdag" # ggplot DAGs
)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(char = packages)
if (!require("bartCause")) pacman::p_load_gh("vdorie/bartCause")
g <- dagitty("dag {
sales [pos=\"0,0\"]
mkt [pos=\"2,0\"]
comp [pos=\"1,1\"]
visits [pos=\"1,0\"]
visits -> sales
mkt -> visits
comp -> mkt
comp -> sales
}")
ggdag(tidy_dagitty(g)) + theme_dag_blank()
source("../miscellaneous files/sim_mixed_dag.R")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2)),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "cosin", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "quadratic", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(sales, comp)) + geom_boxplot() + stat_smooth()
source("../miscellaneous files/gen_model_param.R")
f.args_1 <- gen_model_param(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_1)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_1)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
source("../miscellaneous files/get_ate.R")
f.args <- gen_model_param(dag = g, f.args = list(mkt = list(betas = list(comp = 0)), visits = list(betas = list(mkt = 1)),
sales = list(betas = list(visits = 0.5))))
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", exposure = "sales")
a
mkt = rep(1.1, 1000)
source("../miscellaneous files/sim_mixed_dag.R")
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", exposure = "sales")
source("../miscellaneous files/sim_mixed_dag.R")
ans
a
knitr::opts_chunk$set(echo = F, warning = F, message = F, cache = F)
set.seed(1)
options(scipen = 999)
packages <- c(
"tidyverse", # best thing that ever happend to me
"pander", # table rendering
"dagitty", # Create DAGs
"ggdag" # ggplot DAGs
)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(char = packages)
if (!require("bartCause")) pacman::p_load_gh("vdorie/bartCause")
g <- dagitty("dag {
sales [pos=\"0,0\"]
mkt [pos=\"2,0\"]
comp [pos=\"1,1\"]
visits [pos=\"1,0\"]
visits -> sales
mkt -> visits
comp -> mkt
comp -> sales
}")
ggdag(tidy_dagitty(g)) + theme_dag_blank()
source("../miscellaneous files/sim_mixed_dag.R")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2)),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "cosin", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "quadratic", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(sales, comp)) + geom_boxplot() + stat_smooth()
source("../miscellaneous files/gen_model_param.R")
f.args_1 <- gen_model_param(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_1)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_1)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
source("../miscellaneous files/get_ate.R")
f.args <- gen_model_param(dag = g, f.args = list(mkt = list(betas = list(comp = 0)), visits = list(betas = list(mkt = 1)),
sales = list(betas = list(visits = 0.5))))
mkt <- rep(1.1, 1000)
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", exposure = "sales")
a
rm(mkt)
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", exposure = "sales")
a
knitr::opts_chunk$set(echo = F, warning = F, message = F, cache = F)
set.seed(1)
options(scipen = 999)
packages <- c(
"tidyverse", # best thing that ever happend to me
"pander", # table rendering
"dagitty", # Create DAGs
"ggdag" # ggplot DAGs
)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(char = packages)
if (!require("bartCause")) pacman::p_load_gh("vdorie/bartCause")
g <- dagitty("dag {
sales [pos=\"0,0\"]
mkt [pos=\"2,0\"]
comp [pos=\"1,1\"]
visits [pos=\"1,0\"]
visits -> sales
mkt -> visits
comp -> mkt
comp -> sales
}")
ggdag(tidy_dagitty(g)) + theme_dag_blank()
source("../miscellaneous files/sim_mixed_dag.R")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2)),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "cosin", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "quadratic", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(sales, comp)) + geom_boxplot() + stat_smooth()
source("../miscellaneous files/gen_model_param.R")
f.args_1 <- gen_model_param(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_1)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_1)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
source("../miscellaneous files/get_ate.R")
f.args <- gen_model_param(dag = g, f.args = list(mkt = list(betas = list(comp = 0)), visits = list(betas = list(mkt = 1)),
sales = list(betas = list(visits = 0.5))))
mkt <- rep(1.1, 1000)
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", exposure = "sales")
a
knitr::opts_chunk$set(echo = F, warning = F, message = F, cache = F)
set.seed(1)
options(scipen = 999)
packages <- c(
"tidyverse", # best thing that ever happend to me
"pander", # table rendering
"dagitty", # Create DAGs
"ggdag" # ggplot DAGs
)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(char = packages)
if (!require("bartCause")) pacman::p_load_gh("vdorie/bartCause")
g <- dagitty("dag {
sales [pos=\"0,0\"]
mkt [pos=\"2,0\"]
comp [pos=\"1,1\"]
visits [pos=\"1,0\"]
visits -> sales
mkt -> visits
comp -> mkt
comp -> sales
}")
ggdag(tidy_dagitty(g)) + theme_dag_blank()
source("../miscellaneous files/sim_mixed_dag.R")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2)),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "cosin", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "quadratic", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(sales, comp)) + geom_boxplot() + stat_smooth()
source("../miscellaneous files/gen_model_param.R")
f.args_1 <- gen_model_param(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_1)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_1)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
source("../miscellaneous files/get_ate.R")
f.args <- gen_model_param(dag = g, f.args = list(mkt = list(betas = list(comp = 0)), visits = list(betas = list(mkt = 1)),
sales = list(betas = list(visits = 0.5))))
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", exposure = "sales", M = 100)
a
debugSource('~/Documents/my folder/Iyar projects/blog/miscellaneous files/sim_mixed_dag.R')
knitr::opts_chunk$set(echo = F, warning = F, message = F, cache = F)
set.seed(1)
options(scipen = 999)
packages <- c(
"tidyverse", # best thing that ever happend to me
"pander", # table rendering
"dagitty", # Create DAGs
"ggdag" # ggplot DAGs
)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(char = packages)
if (!require("bartCause")) pacman::p_load_gh("vdorie/bartCause")
g <- dagitty("dag {
sales [pos=\"0,0\"]
mkt [pos=\"2,0\"]
comp [pos=\"1,1\"]
visits [pos=\"1,0\"]
visits -> sales
mkt -> visits
comp -> mkt
comp -> sales
}")
ggdag(tidy_dagitty(g)) + theme_dag_blank()
source("../miscellaneous files/sim_mixed_dag.R")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2)),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "cosin", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2), link = "quadratic", sinr = 3),
mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(comp, sales)) + geom_point() + stat_smooth()
sim_data <- sim_mixed_dag(dag = g, f.args = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3, labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0))))
sim_data %>% ggplot(aes(sales, comp)) + geom_boxplot() + stat_smooth()
f.args_partial = list(sales = list(betas = list(comp = -2),
link = "quadratic", sinr = 3, levels = 3,
labels = c("low", "medium", "high")), mkt = list(betas = list(comp = 0)))
source("../miscellaneous files/gen_model_param.R")
f.args_full <- gen_model_param(dag = g, f.args = f.args_partial)
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_full)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
sim_data <- sim_mixed_dag(dag = g, f.args = f.args_full)
sim_data %>% ggplot(aes(mkt, visits)) + geom_point() + stat_smooth(method = "lm")
source("../miscellaneous files/get_ate.R")
f.args <- gen_model_param(dag = g, f.args = list(visits = list(betas = list(mkt = 1)),
sales = list(betas = list(visits = 0.5))))
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", treatment_vals = seq(-2, 2), exposure = "sales")
pandoc.table(a)
View(gen_model_param)
View(get_ate)
View(sim_mixed_dag)
f.args <- gen_model_param(dag = g, f.args = list(visits = list(betas = list(mkt = 2), levels = 3),
sales = list(betas = list(visits = c(0.7, 4)), link = "quadratic"),
mkt = list(betas = list(comp = 0), link = "cosin")))
sim_data <- sim_mixed_dag(dag = g, f.args = f.args)
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", treatment_vals = seq(-2, 2), exposure = "sales")
table(lp)
?pnorm
pnorm(c(0.3, 0.5))
level = 3
pnorm(x = seq(0, 1, length.out = levels + 1))
pnorm(q = seq(0, 1, length.out = levels + 1))
levels
pnorm(q = seq(0, 1, length.out = 3 + 1))
?cut
table(c)ut(rnorm(1000), breaks = pnorm(q = seq(0, 1, length.out = 3 + 1)))
table(cut(rnorm(1000), breaks = pnorm(q = seq(0, 1, length.out = 3 + 1))))
table(cut(rnorm(1000), breaks = pnorm(q = seq(0, 1, length.out = 3 + 1)), include.lowest = T))
table(cut(rnorm(1000), breaks = pnorm(q = c(-Inf, seq(0, 1, length.out = 3 + 1), Inf), include.lowest = T))
)
table(cut(rnorm(1000), breaks = pnorm(q = c(-Inf, seq(0, 1, length.out = 3 + 1), Inf)), include.lowest = T))
pnorm(q = c(-Inf, seq(0, 1, length.out = 3 + 1), Inf))
c(-Inf, qnorm(p = seq(0, 1, length.out = 3 + 1))), Inf)
c(-Inf, qnorm(p = seq(0, 1, length.out = 3 + 1)), Inf)
qnorm(p = seq(0, 1, length.out = 3 + 1))
table(cut(rnorm(1000), qnorm(p = seq(0, 1, length.out = 3 + 1))))
source('~/Documents/my folder/Iyar projects/blog/post drafts/../miscellaneous files/get_ate.R')
source("../miscellaneous files/get_ate.R")
source("../miscellaneous files/sim_mixed_dag.R")
View(gen_model_param)
View(get_ate)
View(sim_mixed_dag)
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", treatment_vals = seq(-2, 2), exposure = "sales")
pandoc.table(a)
f.args <- gen_model_param(dag = g, f.args = list(visits = list(betas = list(mkt = 2), levels = 3),
sales = list(betas = list(visits = c(0.7, 2)), link = "quadratic"),
mkt = list(betas = list(comp = 0), link = "cosin")))
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", treatment_vals = seq(-2, 2), exposure = "sales")
pandoc.table(a)
f.args <- gen_model_param(dag = g, f.args = list(visits = list(betas = list(mkt = 2), levels = 3),
sales = list(betas = list(visits = c(0.7, 2), comp = -2), link = "quadratic"),
mkt = list(betas = list(comp = 3), link = "cosin")))
a <- get_ate(dag = g, f.args = f.args, treatment = "mkt", treatment_vals = seq(-2, 2), exposure = "sales")
pandoc.table(a)
f.args <- gen_model_param(dag = g, f.args = list(visits = list(betas = list(mkt = 2), levels = 3),
sales = list(betas = list(visits = c(0.7, 2), comp = -2), link = "quadratic"),
mkt = list(betas = list(comp = 0), link = "cosin")))
sim_data <- sim_mixed_dag(dag, f.args)
sim_data <- sim_mixed_dag(dag = g, f.args)
sim_data %>% ggplot(aes(mkt, sales)) + geom_point()
sim_data %>% ggplot(aes(mkt, sales)) + geom_point() + stat_smooth()
seq(-2.5, 2.5)
sim_data %>% mutate(mkt_cut = cut(mkt, seq(-2.5, 2.5))) %>% group_by(mkt_cut) %>% summarise(sales = mean(sales))
